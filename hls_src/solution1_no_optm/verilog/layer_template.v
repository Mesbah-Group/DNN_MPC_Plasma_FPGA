// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layer_template (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        W_address0,
        W_ce0,
        W_q0,
        b_address0,
        b_ce0,
        b_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [2:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
output  [5:0] W_address0;
output   W_ce0;
input  [31:0] W_q0;
output  [2:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;
reg out_r_ce0;
reg out_r_we0;
reg W_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_145_p2;
reg   [2:0] i_reg_228;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln56_fu_151_p1;
reg   [63:0] zext_ln56_reg_233;
wire   [0:0] icmp_ln55_fu_139_p2;
wire   [6:0] sub_ln58_fu_180_p2;
reg   [6:0] sub_ln58_reg_238;
reg   [2:0] out_addr_reg_243;
wire   [2:0] j_fu_192_p2;
reg   [2:0] j_reg_251;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln57_fu_186_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] W_load_reg_271;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] tmp_6_reg_281;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_124_p2;
wire    ap_CS_fsm_state13;
reg   [31:0] b_load_reg_291;
wire    ap_CS_fsm_state14;
reg   [31:0] z_assign_reg_296;
wire    ap_CS_fsm_state19;
reg   [2:0] i_0_reg_89;
wire    ap_CS_fsm_state21;
reg   [31:0] empty_17_reg_100;
reg   [2:0] j_0_reg_112;
wire  signed [63:0] sext_ln58_fu_207_p1;
wire   [63:0] zext_ln58_fu_212_p1;
reg   [31:0] grp_fu_124_p0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire   [5:0] tmp_fu_156_p3;
wire   [3:0] tmp_9_fu_168_p3;
wire   [6:0] zext_ln58_6_fu_164_p1;
wire   [6:0] zext_ln58_7_fu_176_p1;
wire   [6:0] zext_ln58_8_fu_198_p1;
wire   [6:0] add_ln58_fu_202_p2;
wire   [0:0] grp_fu_134_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

nn_accel_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nn_accel_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .din1(empty_17_reg_100),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

nn_accel_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nn_accel_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_q0),
    .din1(W_load_reg_271),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

nn_accel_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
nn_accel_fcmp_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(z_assign_reg_296),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        empty_17_reg_100 <= grp_fu_124_p2;
    end else if (((icmp_ln55_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_17_reg_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_0_reg_89 <= i_reg_228;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_89 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_reg_112 <= j_reg_251;
    end else if (((icmp_ln55_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        W_load_reg_271 <= W_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        b_load_reg_291 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_228 <= i_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_251 <= j_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_addr_reg_243 <= zext_ln56_fu_151_p1;
        sub_ln58_reg_238[6 : 1] <= sub_ln58_fu_180_p2[6 : 1];
        zext_ln56_reg_233[2 : 0] <= zext_ln56_fu_151_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_reg_281 <= grp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        z_assign_reg_296 <= grp_fu_124_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln55_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_124_p0 = b_load_reg_291;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_124_p0 = tmp_6_reg_281;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln55_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln57_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_address0 = sext_ln58_fu_207_p1;

assign add_ln58_fu_202_p2 = (sub_ln58_reg_238 + zext_ln58_8_fu_198_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_address0 = zext_ln56_reg_233;

assign i_fu_145_p2 = (i_0_reg_89 + 3'd1);

assign icmp_ln55_fu_139_p2 = ((i_0_reg_89 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_186_p2 = ((j_0_reg_112 == 3'd6) ? 1'b1 : 1'b0);

assign j_fu_192_p2 = (j_0_reg_112 + 3'd1);

assign out_r_address0 = out_addr_reg_243;

assign out_r_d0 = ((grp_fu_134_p2[0:0] === 1'b1) ? z_assign_reg_296 : 32'd0);

assign sext_ln58_fu_207_p1 = $signed(add_ln58_fu_202_p2);

assign sub_ln58_fu_180_p2 = (zext_ln58_6_fu_164_p1 - zext_ln58_7_fu_176_p1);

assign tmp_9_fu_168_p3 = {{i_0_reg_89}, {1'd0}};

assign tmp_fu_156_p3 = {{i_0_reg_89}, {3'd0}};

assign x_address0 = zext_ln58_fu_212_p1;

assign zext_ln56_fu_151_p1 = i_0_reg_89;

assign zext_ln58_6_fu_164_p1 = tmp_fu_156_p3;

assign zext_ln58_7_fu_176_p1 = tmp_9_fu_168_p3;

assign zext_ln58_8_fu_198_p1 = j_0_reg_112;

assign zext_ln58_fu_212_p1 = j_0_reg_112;

always @ (posedge ap_clk) begin
    zext_ln56_reg_233[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln58_reg_238[0] <= 1'b0;
end

endmodule //layer_template
