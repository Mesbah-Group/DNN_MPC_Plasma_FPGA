// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module neural_net (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_0_read,
        in_1_read,
        in_2_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 67'd1;
parameter    ap_ST_fsm_state2 = 67'd2;
parameter    ap_ST_fsm_state3 = 67'd4;
parameter    ap_ST_fsm_state4 = 67'd8;
parameter    ap_ST_fsm_state5 = 67'd16;
parameter    ap_ST_fsm_state6 = 67'd32;
parameter    ap_ST_fsm_state7 = 67'd64;
parameter    ap_ST_fsm_state8 = 67'd128;
parameter    ap_ST_fsm_state9 = 67'd256;
parameter    ap_ST_fsm_state10 = 67'd512;
parameter    ap_ST_fsm_state11 = 67'd1024;
parameter    ap_ST_fsm_state12 = 67'd2048;
parameter    ap_ST_fsm_state13 = 67'd4096;
parameter    ap_ST_fsm_state14 = 67'd8192;
parameter    ap_ST_fsm_state15 = 67'd16384;
parameter    ap_ST_fsm_state16 = 67'd32768;
parameter    ap_ST_fsm_state17 = 67'd65536;
parameter    ap_ST_fsm_state18 = 67'd131072;
parameter    ap_ST_fsm_state19 = 67'd262144;
parameter    ap_ST_fsm_state20 = 67'd524288;
parameter    ap_ST_fsm_state21 = 67'd1048576;
parameter    ap_ST_fsm_state22 = 67'd2097152;
parameter    ap_ST_fsm_state23 = 67'd4194304;
parameter    ap_ST_fsm_state24 = 67'd8388608;
parameter    ap_ST_fsm_state25 = 67'd16777216;
parameter    ap_ST_fsm_state26 = 67'd33554432;
parameter    ap_ST_fsm_state27 = 67'd67108864;
parameter    ap_ST_fsm_state28 = 67'd134217728;
parameter    ap_ST_fsm_state29 = 67'd268435456;
parameter    ap_ST_fsm_state30 = 67'd536870912;
parameter    ap_ST_fsm_state31 = 67'd1073741824;
parameter    ap_ST_fsm_state32 = 67'd2147483648;
parameter    ap_ST_fsm_state33 = 67'd4294967296;
parameter    ap_ST_fsm_state34 = 67'd8589934592;
parameter    ap_ST_fsm_state35 = 67'd17179869184;
parameter    ap_ST_fsm_state36 = 67'd34359738368;
parameter    ap_ST_fsm_state37 = 67'd68719476736;
parameter    ap_ST_fsm_state38 = 67'd137438953472;
parameter    ap_ST_fsm_state39 = 67'd274877906944;
parameter    ap_ST_fsm_state40 = 67'd549755813888;
parameter    ap_ST_fsm_state41 = 67'd1099511627776;
parameter    ap_ST_fsm_state42 = 67'd2199023255552;
parameter    ap_ST_fsm_state43 = 67'd4398046511104;
parameter    ap_ST_fsm_state44 = 67'd8796093022208;
parameter    ap_ST_fsm_state45 = 67'd17592186044416;
parameter    ap_ST_fsm_state46 = 67'd35184372088832;
parameter    ap_ST_fsm_state47 = 67'd70368744177664;
parameter    ap_ST_fsm_state48 = 67'd140737488355328;
parameter    ap_ST_fsm_state49 = 67'd281474976710656;
parameter    ap_ST_fsm_state50 = 67'd562949953421312;
parameter    ap_ST_fsm_state51 = 67'd1125899906842624;
parameter    ap_ST_fsm_state52 = 67'd2251799813685248;
parameter    ap_ST_fsm_state53 = 67'd4503599627370496;
parameter    ap_ST_fsm_state54 = 67'd9007199254740992;
parameter    ap_ST_fsm_state55 = 67'd18014398509481984;
parameter    ap_ST_fsm_state56 = 67'd36028797018963968;
parameter    ap_ST_fsm_state57 = 67'd72057594037927936;
parameter    ap_ST_fsm_state58 = 67'd144115188075855872;
parameter    ap_ST_fsm_state59 = 67'd288230376151711744;
parameter    ap_ST_fsm_state60 = 67'd576460752303423488;
parameter    ap_ST_fsm_state61 = 67'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 67'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 67'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 67'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 67'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 67'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 67'd73786976294838206464;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_0_read;
input  [31:0] in_1_read;
input  [31:0] in_2_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [66:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] input_weights_address0;
reg    input_weights_ce0;
wire   [31:0] input_weights_q0;
wire   [2:0] input_biases_address0;
reg    input_biases_ce0;
wire   [31:0] input_biases_q0;
reg    hlayer1_weights_ce0;
wire   [31:0] hlayer1_weights_q0;
reg    hlayer1_biases_ce0;
wire   [31:0] hlayer1_biases_q0;
reg    hlayer2_weights_ce0;
wire   [31:0] hlayer2_weights_q0;
reg    hlayer2_biases_ce0;
wire   [31:0] hlayer2_biases_q0;
reg    hlayer3_weights_ce0;
wire   [31:0] hlayer3_weights_q0;
reg    hlayer3_biases_ce0;
wire   [31:0] hlayer3_biases_q0;
reg    hlayer4_weights_ce0;
wire   [31:0] hlayer4_weights_q0;
reg    hlayer4_biases_ce0;
wire   [31:0] hlayer4_biases_q0;
wire   [3:0] hlayer5_weights_address0;
reg    hlayer5_weights_ce0;
wire   [31:0] hlayer5_weights_q0;
wire   [31:0] grp_fu_488_p2;
reg   [31:0] reg_500;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_479_p2;
reg   [31:0] reg_505;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state62;
wire   [1:0] add_ln74_fu_521_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_621_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln89_fu_660_p2;
wire    ap_CS_fsm_state4;
wire   [1:0] i_2_fu_760_p2;
reg   [1:0] i_2_reg_1196;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_3_fu_775_p5;
wire   [0:0] icmp_ln94_fu_754_p2;
wire   [2:0] i_3_fu_809_p2;
reg   [2:0] i_3_reg_1209;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln56_fu_815_p1;
reg   [63:0] zext_ln56_reg_1214;
wire   [0:0] icmp_ln55_fu_803_p2;
wire   [5:0] sub_ln58_fu_836_p2;
reg   [5:0] sub_ln58_reg_1219;
reg   [2:0] out1_addr_reg_1224;
wire   [1:0] j_fu_848_p2;
reg   [1:0] j_reg_1232;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln57_fu_842_p2;
reg   [31:0] input_weights_load_reg_1247;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_4_fu_877_p5;
wire    ap_CS_fsm_state18;
reg   [31:0] input_biases_load_reg_1257;
wire    ap_CS_fsm_state27;
reg   [31:0] z_assign_reg_1262;
wire    ap_CS_fsm_state32;
wire   [1:0] i_5_fu_904_p2;
reg   [1:0] i_5_reg_1271;
wire    ap_CS_fsm_state42;
wire   [4:0] sub_ln58_1_fu_930_p2;
reg   [4:0] sub_ln58_1_reg_1276;
wire   [0:0] icmp_ln55_1_fu_898_p2;
wire   [0:0] trunc_ln56_fu_936_p1;
reg   [0:0] trunc_ln56_reg_1281;
wire   [2:0] j_1_fu_946_p2;
reg   [2:0] j_1_reg_1291;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln57_1_fu_940_p2;
wire   [31:0] select_ln60_fu_966_p3;
wire    ap_CS_fsm_state44;
reg   [31:0] hlayer5_weights_load_reg_1311;
wire   [31:0] out5_q0;
wire    ap_CS_fsm_state45;
wire   [31:0] select_ln60_1_fu_979_p3;
wire    ap_CS_fsm_state57;
wire   [31:0] select_ln60_2_fu_986_p3;
wire   [1:0] i_4_fu_999_p2;
reg   [1:0] i_4_reg_1334;
wire    ap_CS_fsm_state58;
wire   [0:0] trunc_ln123_fu_1005_p1;
reg   [0:0] trunc_ln123_reg_1339;
wire   [0:0] icmp_ln122_fu_993_p2;
wire   [31:0] select_ln123_fu_1009_p3;
wire   [31:0] out6_1_2_fu_1018_p3;
wire    ap_CS_fsm_state66;
wire   [31:0] out6_1_3_fu_1025_p3;
wire   [1:0] i_6_fu_1038_p2;
wire    ap_CS_fsm_state67;
wire   [31:0] select_ln134_fu_1048_p3;
wire   [0:0] icmp_ln133_fu_1032_p2;
wire   [31:0] select_ln134_1_fu_1056_p3;
reg   [2:0] out1_address0;
reg    out1_ce0;
reg    out1_we0;
wire   [31:0] out1_d0;
wire   [31:0] out1_q0;
reg   [2:0] out2_address0;
reg    out2_ce0;
reg    out2_we0;
wire   [31:0] out2_q0;
reg   [2:0] out3_address0;
reg    out3_ce0;
reg    out3_we0;
wire   [31:0] out3_q0;
reg   [2:0] out4_address0;
reg    out4_ce0;
reg    out4_we0;
wire   [31:0] out4_q0;
reg   [2:0] out5_address0;
reg    out5_ce0;
reg    out5_we0;
wire    grp_layer_template_fu_463_ap_start;
wire    grp_layer_template_fu_463_ap_done;
wire    grp_layer_template_fu_463_ap_idle;
wire    grp_layer_template_fu_463_ap_ready;
wire   [2:0] grp_layer_template_fu_463_x_address0;
wire    grp_layer_template_fu_463_x_ce0;
reg   [31:0] grp_layer_template_fu_463_x_q0;
wire   [2:0] grp_layer_template_fu_463_out_r_address0;
wire    grp_layer_template_fu_463_out_r_ce0;
wire    grp_layer_template_fu_463_out_r_we0;
wire   [31:0] grp_layer_template_fu_463_out_r_d0;
wire   [5:0] grp_layer_template_fu_463_W_address0;
wire    grp_layer_template_fu_463_W_ce0;
reg   [31:0] grp_layer_template_fu_463_W_q0;
wire   [2:0] grp_layer_template_fu_463_b_address0;
wire    grp_layer_template_fu_463_b_ce0;
reg   [31:0] grp_layer_template_fu_463_b_q0;
reg   [1:0] phi_ln74_reg_258;
wire   [0:0] icmp_ln74_fu_579_p2;
wire   [1:0] ap_phi_mux_i1_0_phi_fu_273_p4;
reg   [1:0] i1_0_reg_269;
wire   [0:0] icmp_ln83_fu_615_p2;
reg   [1:0] phi_ln89_reg_280;
wire   [0:0] icmp_ln89_fu_718_p2;
reg   [1:0] i2_0_reg_291;
wire    ap_CS_fsm_state14;
reg   [2:0] i_0_i_reg_303;
wire    ap_CS_fsm_state34;
reg   [31:0] empty_8_reg_314;
reg   [1:0] j_0_i_reg_326;
reg   [31:0] out6_0_reg_338;
reg   [31:0] out6_1_reg_350;
reg   [1:0] i_0_i1_reg_362;
wire    ap_CS_fsm_state41;
reg   [31:0] empty_12_reg_373;
reg   [2:0] j_0_i5_reg_385;
reg   [31:0] out6_0_0_reg_397;
reg   [31:0] out6_1_0_reg_408;
reg   [1:0] i3_0_reg_419;
reg   [31:0] out_0_write_assign_reg_430;
reg   [31:0] out_1_write_assign_reg_441;
reg   [1:0] i5_0_reg_452;
reg    grp_layer_template_fu_463_ap_start_reg;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire  signed [63:0] sext_ln58_fu_863_p1;
wire  signed [63:0] sext_ln58_1_fu_961_p1;
wire   [63:0] zext_ln58_1_fu_974_p1;
reg   [31:0] scaled_x_0_0_fu_110;
wire   [31:0] select_ln74_4_fu_571_p3;
reg   [31:0] scaled_x_1_0_fu_114;
wire   [31:0] select_ln74_3_fu_563_p3;
reg   [31:0] scaled_x_2_0_fu_118;
wire   [31:0] select_ln74_1_fu_547_p3;
reg   [31:0] scaled_x_2_fu_142;
wire   [31:0] scaled_x_0_fu_627_p5;
reg   [31:0] scaled_x_2_1_fu_146;
reg   [31:0] scaled_x_2_2_fu_150;
reg   [31:0] scaled_x2_0_0_fu_154;
wire   [31:0] select_ln89_4_fu_710_p3;
reg   [31:0] scaled_x2_1_0_fu_158;
wire   [31:0] select_ln89_3_fu_702_p3;
reg   [31:0] scaled_x2_2_0_fu_162;
wire   [31:0] select_ln89_1_fu_686_p3;
reg   [31:0] scaled_x2_2_fu_166;
reg   [31:0] scaled_x2_2_1_fu_170;
reg   [31:0] scaled_x2_2_2_fu_174;
reg   [31:0] grp_fu_479_p0;
reg   [31:0] grp_fu_479_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_488_p0;
reg   [31:0] grp_fu_488_p1;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln74_1_fu_527_p2;
wire   [0:0] icmp_ln74_2_fu_541_p2;
wire   [31:0] select_ln74_fu_533_p3;
wire   [31:0] select_ln74_2_fu_555_p3;
wire   [0:0] icmp_ln89_1_fu_666_p2;
wire   [0:0] icmp_ln89_2_fu_680_p2;
wire   [31:0] select_ln89_fu_672_p3;
wire   [31:0] select_ln89_2_fu_694_p3;
wire   [4:0] tmp_1_fu_824_p3;
wire   [5:0] zext_ln58_2_fu_832_p1;
wire   [5:0] zext_ln58_fu_820_p1;
wire   [5:0] zext_ln58_4_fu_854_p1;
wire   [5:0] add_ln58_fu_858_p2;
wire   [0:0] grp_fu_495_p2;
wire   [2:0] tmp_6_fu_918_p3;
wire   [4:0] tmp_5_fu_910_p3;
wire   [4:0] zext_ln58_3_fu_926_p1;
wire   [4:0] zext_ln58_5_fu_952_p1;
wire   [4:0] add_ln58_1_fu_956_p2;
wire   [0:0] trunc_ln134_fu_1044_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [66:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 67'd1;
#0 grp_layer_template_fu_463_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

neural_net_input_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
input_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_weights_address0),
    .ce0(input_weights_ce0),
    .q0(input_weights_q0)
);

neural_net_input_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
input_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_biases_address0),
    .ce0(input_biases_ce0),
    .q0(input_biases_q0)
);

neural_net_hlayerg8j #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
hlayer1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_W_address0),
    .ce0(hlayer1_weights_ce0),
    .q0(hlayer1_weights_q0)
);

neural_net_hlayerhbi #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
hlayer1_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_b_address0),
    .ce0(hlayer1_biases_ce0),
    .q0(hlayer1_biases_q0)
);

neural_net_hlayeribs #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
hlayer2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_W_address0),
    .ce0(hlayer2_weights_ce0),
    .q0(hlayer2_weights_q0)
);

neural_net_hlayerjbC #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
hlayer2_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_b_address0),
    .ce0(hlayer2_biases_ce0),
    .q0(hlayer2_biases_q0)
);

neural_net_hlayerkbM #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
hlayer3_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_W_address0),
    .ce0(hlayer3_weights_ce0),
    .q0(hlayer3_weights_q0)
);

neural_net_hlayerlbW #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
hlayer3_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_b_address0),
    .ce0(hlayer3_biases_ce0),
    .q0(hlayer3_biases_q0)
);

neural_net_hlayermb6 #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
hlayer4_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_W_address0),
    .ce0(hlayer4_weights_ce0),
    .q0(hlayer4_weights_q0)
);

neural_net_hlayerncg #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
hlayer4_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_layer_template_fu_463_b_address0),
    .ce0(hlayer4_biases_ce0),
    .q0(hlayer4_biases_q0)
);

neural_net_hlayerocq #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
hlayer5_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hlayer5_weights_address0),
    .ce0(hlayer5_weights_ce0),
    .q0(hlayer5_weights_q0)
);

neural_net_out1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
out1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out1_address0),
    .ce0(out1_ce0),
    .we0(out1_we0),
    .d0(out1_d0),
    .q0(out1_q0)
);

neural_net_out1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
out2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out2_address0),
    .ce0(out2_ce0),
    .we0(out2_we0),
    .d0(grp_layer_template_fu_463_out_r_d0),
    .q0(out2_q0)
);

neural_net_out1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
out3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out3_address0),
    .ce0(out3_ce0),
    .we0(out3_we0),
    .d0(grp_layer_template_fu_463_out_r_d0),
    .q0(out3_q0)
);

neural_net_out1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
out4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out4_address0),
    .ce0(out4_ce0),
    .we0(out4_we0),
    .d0(grp_layer_template_fu_463_out_r_d0),
    .q0(out4_q0)
);

neural_net_out1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
out5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out5_address0),
    .ce0(out5_ce0),
    .we0(out5_we0),
    .d0(grp_layer_template_fu_463_out_r_d0),
    .q0(out5_q0)
);

layer_template grp_layer_template_fu_463(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_layer_template_fu_463_ap_start),
    .ap_done(grp_layer_template_fu_463_ap_done),
    .ap_idle(grp_layer_template_fu_463_ap_idle),
    .ap_ready(grp_layer_template_fu_463_ap_ready),
    .x_address0(grp_layer_template_fu_463_x_address0),
    .x_ce0(grp_layer_template_fu_463_x_ce0),
    .x_q0(grp_layer_template_fu_463_x_q0),
    .out_r_address0(grp_layer_template_fu_463_out_r_address0),
    .out_r_ce0(grp_layer_template_fu_463_out_r_ce0),
    .out_r_we0(grp_layer_template_fu_463_out_r_we0),
    .out_r_d0(grp_layer_template_fu_463_out_r_d0),
    .W_address0(grp_layer_template_fu_463_W_address0),
    .W_ce0(grp_layer_template_fu_463_W_ce0),
    .W_q0(grp_layer_template_fu_463_W_q0),
    .b_address0(grp_layer_template_fu_463_b_address0),
    .b_ce0(grp_layer_template_fu_463_b_ce0),
    .b_q0(grp_layer_template_fu_463_b_q0)
);

nn_accel_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nn_accel_fadd_32nbkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_479_p0),
    .din1(grp_fu_479_p1),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

nn_accel_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nn_accel_fmul_32ncud_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_488_p0),
    .din1(grp_fu_488_p1),
    .ce(1'b1),
    .dout(grp_fu_488_p2)
);

nn_accel_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
nn_accel_fcmp_32ndEe_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(z_assign_reg_1262),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_495_p2)
);

nn_accel_mux_32_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
nn_accel_mux_32_3pcA_U14(
    .din0(in_0_read),
    .din1(in_1_read),
    .din2(in_2_read),
    .din3(i1_0_reg_269),
    .dout(scaled_x_0_fu_627_p5)
);

nn_accel_mux_32_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
nn_accel_mux_32_3pcA_U15(
    .din0(scaled_x_2_fu_142),
    .din1(scaled_x_2_1_fu_146),
    .din2(scaled_x_2_2_fu_150),
    .din3(i2_0_reg_291),
    .dout(tmp_3_fu_775_p5)
);

nn_accel_mux_32_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
nn_accel_mux_32_3pcA_U16(
    .din0(scaled_x2_2_fu_166),
    .din1(scaled_x2_2_1_fu_170),
    .din2(scaled_x2_2_2_fu_174),
    .din3(j_0_i_reg_326),
    .dout(tmp_4_fu_877_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_return_0_preg <= out_0_write_assign_reg_430;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_return_1_preg <= out_1_write_assign_reg_441;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_layer_template_fu_463_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | ((icmp_ln55_fu_803_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
            grp_layer_template_fu_463_ap_start_reg <= 1'b1;
        end else if ((grp_layer_template_fu_463_ap_ready == 1'b1)) begin
            grp_layer_template_fu_463_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        empty_12_reg_373 <= grp_fu_479_p2;
    end else if (((icmp_ln55_1_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        empty_12_reg_373 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        empty_8_reg_314 <= grp_fu_479_p2;
    end else if (((icmp_ln55_fu_803_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        empty_8_reg_314 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_reg_269 <= i_fu_621_p2;
    end else if (((icmp_ln74_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_269 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i2_0_reg_291 <= i_2_reg_1196;
    end else if (((icmp_ln89_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_291 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_1_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        i3_0_reg_419 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        i3_0_reg_419 <= i_4_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_993_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        i5_0_reg_452 <= 2'd0;
    end else if (((icmp_ln133_fu_1032_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        i5_0_reg_452 <= i_6_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        i_0_i1_reg_362 <= i_5_reg_1271;
    end else if (((grp_layer_template_fu_463_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        i_0_i1_reg_362 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_reg_303 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i_0_i_reg_303 <= i_3_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_0_i5_reg_385 <= j_1_reg_1291;
    end else if (((icmp_ln55_1_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        j_0_i5_reg_385 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_i_reg_326 <= j_reg_1232;
    end else if (((icmp_ln55_fu_803_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        j_0_i_reg_326 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_1_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        out6_0_0_reg_397 <= out6_0_reg_338;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        out6_0_0_reg_397 <= out6_1_2_fu_1018_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_1_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        out6_1_0_reg_408 <= out6_1_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        out6_1_0_reg_408 <= out6_1_3_fu_1025_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln74_reg_258 <= add_ln74_fu_521_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln74_reg_258 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln89_reg_280 <= 2'd0;
    end else if (((icmp_ln89_fu_718_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln89_reg_280 <= add_ln89_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i2_0_reg_291 == 2'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        scaled_x2_2_1_fu_170 <= reg_505;
    end else if (((icmp_ln89_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        scaled_x2_2_1_fu_170 <= select_ln89_3_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i2_0_reg_291 == 2'd1) & ~(i2_0_reg_291 == 2'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        scaled_x2_2_2_fu_174 <= reg_505;
    end else if (((icmp_ln89_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        scaled_x2_2_2_fu_174 <= select_ln89_1_fu_686_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((i2_0_reg_291 == 2'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        scaled_x2_2_fu_166 <= reg_505;
    end else if (((icmp_ln89_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        scaled_x2_2_fu_166 <= select_ln89_4_fu_710_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_i1_0_phi_fu_273_p4 == 2'd1) & (icmp_ln83_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        scaled_x_2_1_fu_146 <= scaled_x_0_fu_627_p5;
    end else if (((icmp_ln74_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        scaled_x_2_1_fu_146 <= select_ln74_3_fu_563_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i1_0_phi_fu_273_p4 == 2'd1) & ~(ap_phi_mux_i1_0_phi_fu_273_p4 == 2'd0) & (icmp_ln83_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        scaled_x_2_2_fu_150 <= scaled_x_0_fu_627_p5;
    end else if (((icmp_ln74_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        scaled_x_2_2_fu_150 <= select_ln74_1_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_i1_0_phi_fu_273_p4 == 2'd0) & (icmp_ln83_fu_615_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        scaled_x_2_fu_142 <= scaled_x_0_fu_627_p5;
    end else if (((icmp_ln74_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        scaled_x_2_fu_142 <= select_ln74_4_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        hlayer5_weights_load_reg_1311 <= hlayer5_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_1196 <= i_2_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_3_reg_1209 <= i_3_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_4_reg_1334 <= i_4_fu_999_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_5_reg_1271 <= i_5_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input_biases_load_reg_1257 <= input_biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_weights_load_reg_1247 <= input_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_1_reg_1291 <= j_1_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_reg_1232 <= j_fu_848_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_803_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        out1_addr_reg_1224 <= zext_ln56_fu_815_p1;
        sub_ln58_reg_1219 <= sub_ln58_fu_836_p2;
        zext_ln56_reg_1214[2 : 0] <= zext_ln56_fu_815_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        out6_0_reg_338 <= select_ln60_1_fu_979_p3;
        out6_1_reg_350 <= select_ln60_2_fu_986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_1032_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        out_0_write_assign_reg_430 <= select_ln134_fu_1048_p3;
        out_1_write_assign_reg_441 <= select_ln134_1_fu_1056_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_500 <= grp_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_505 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        scaled_x2_0_0_fu_154 <= select_ln89_4_fu_710_p3;
        scaled_x2_1_0_fu_158 <= select_ln89_3_fu_702_p3;
        scaled_x2_2_0_fu_162 <= select_ln89_1_fu_686_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        scaled_x_0_0_fu_110 <= select_ln74_4_fu_571_p3;
        scaled_x_1_0_fu_114 <= select_ln74_3_fu_563_p3;
        scaled_x_2_0_fu_118 <= select_ln74_1_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_1_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        sub_ln58_1_reg_1276[4 : 1] <= sub_ln58_1_fu_930_p2[4 : 1];
        trunc_ln56_reg_1281 <= trunc_ln56_fu_936_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_993_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        trunc_ln123_reg_1339 <= trunc_ln123_fu_1005_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        z_assign_reg_1262 <= grp_fu_479_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_return_0 = out_0_write_assign_reg_430;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        ap_return_1 = out_1_write_assign_reg_441;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_479_p0 = select_ln123_fu_1009_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_479_p0 = empty_12_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_479_p0 = input_biases_load_reg_1257;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_479_p0 = reg_500;
    end else begin
        grp_fu_479_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_479_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_479_p1 = empty_12_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_479_p1 = select_ln60_fu_966_p3;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_479_p1 = empty_8_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_479_p1 = 32'd3212836864;
    end else begin
        grp_fu_479_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_488_p0 = reg_505;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_488_p0 = out5_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_488_p0 = input_weights_load_reg_1247;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_488_p0 = tmp_3_fu_775_p5;
    end else begin
        grp_fu_488_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_488_p1 = 32'd1056964608;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_488_p1 = hlayer5_weights_load_reg_1311;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_488_p1 = tmp_4_fu_877_p5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_488_p1 = 32'd1073741824;
    end else begin
        grp_fu_488_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_layer_template_fu_463_W_q0 = hlayer4_weights_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_layer_template_fu_463_W_q0 = hlayer3_weights_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_layer_template_fu_463_W_q0 = hlayer2_weights_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_layer_template_fu_463_W_q0 = hlayer1_weights_q0;
    end else begin
        grp_layer_template_fu_463_W_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_layer_template_fu_463_b_q0 = hlayer4_biases_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_layer_template_fu_463_b_q0 = hlayer3_biases_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_layer_template_fu_463_b_q0 = hlayer2_biases_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_layer_template_fu_463_b_q0 = hlayer1_biases_q0;
    end else begin
        grp_layer_template_fu_463_b_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_layer_template_fu_463_x_q0 = out4_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_layer_template_fu_463_x_q0 = out3_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_layer_template_fu_463_x_q0 = out2_q0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_layer_template_fu_463_x_q0 = out1_q0;
    end else begin
        grp_layer_template_fu_463_x_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        hlayer1_biases_ce0 = grp_layer_template_fu_463_b_ce0;
    end else begin
        hlayer1_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        hlayer1_weights_ce0 = grp_layer_template_fu_463_W_ce0;
    end else begin
        hlayer1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hlayer2_biases_ce0 = grp_layer_template_fu_463_b_ce0;
    end else begin
        hlayer2_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hlayer2_weights_ce0 = grp_layer_template_fu_463_W_ce0;
    end else begin
        hlayer2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        hlayer3_biases_ce0 = grp_layer_template_fu_463_b_ce0;
    end else begin
        hlayer3_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        hlayer3_weights_ce0 = grp_layer_template_fu_463_W_ce0;
    end else begin
        hlayer3_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        hlayer4_biases_ce0 = grp_layer_template_fu_463_b_ce0;
    end else begin
        hlayer4_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        hlayer4_weights_ce0 = grp_layer_template_fu_463_W_ce0;
    end else begin
        hlayer4_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        hlayer5_weights_ce0 = 1'b1;
    end else begin
        hlayer5_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_biases_ce0 = 1'b1;
    end else begin
        input_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_weights_ce0 = 1'b1;
    end else begin
        input_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out1_address0 = out1_addr_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        out1_address0 = grp_layer_template_fu_463_x_address0;
    end else begin
        out1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        out1_ce0 = grp_layer_template_fu_463_x_ce0;
    end else begin
        out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out1_we0 = 1'b1;
    end else begin
        out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        out2_address0 = grp_layer_template_fu_463_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        out2_address0 = grp_layer_template_fu_463_x_address0;
    end else begin
        out2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        out2_ce0 = grp_layer_template_fu_463_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        out2_ce0 = grp_layer_template_fu_463_x_ce0;
    end else begin
        out2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        out2_we0 = grp_layer_template_fu_463_out_r_we0;
    end else begin
        out2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        out3_address0 = grp_layer_template_fu_463_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        out3_address0 = grp_layer_template_fu_463_x_address0;
    end else begin
        out3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        out3_ce0 = grp_layer_template_fu_463_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        out3_ce0 = grp_layer_template_fu_463_x_ce0;
    end else begin
        out3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        out3_we0 = grp_layer_template_fu_463_out_r_we0;
    end else begin
        out3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        out4_address0 = grp_layer_template_fu_463_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        out4_address0 = grp_layer_template_fu_463_x_address0;
    end else begin
        out4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        out4_ce0 = grp_layer_template_fu_463_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        out4_ce0 = grp_layer_template_fu_463_x_ce0;
    end else begin
        out4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        out4_we0 = grp_layer_template_fu_463_out_r_we0;
    end else begin
        out4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        out5_address0 = zext_ln58_1_fu_974_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        out5_address0 = grp_layer_template_fu_463_out_r_address0;
    end else begin
        out5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        out5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        out5_ce0 = grp_layer_template_fu_463_out_r_ce0;
    end else begin
        out5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        out5_we0 = grp_layer_template_fu_463_out_r_we0;
    end else begin
        out5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln74_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln83_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln89_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln94_fu_754_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln55_fu_803_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln57_fu_842_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state35 : begin
            if (((grp_layer_template_fu_463_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_layer_template_fu_463_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((grp_layer_template_fu_463_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_layer_template_fu_463_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((icmp_ln55_1_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln57_1_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln122_fu_993_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state67 : begin
            if (((icmp_ln133_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_956_p2 = (sub_ln58_1_reg_1276 + zext_ln58_5_fu_952_p1);

assign add_ln58_fu_858_p2 = (sub_ln58_reg_1219 + zext_ln58_4_fu_854_p1);

assign add_ln74_fu_521_p2 = (phi_ln74_reg_258 + 2'd1);

assign add_ln89_fu_660_p2 = (phi_ln89_reg_280 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_i1_0_phi_fu_273_p4 = i1_0_reg_269;

assign grp_layer_template_fu_463_ap_start = grp_layer_template_fu_463_ap_start_reg;

assign hlayer5_weights_address0 = sext_ln58_1_fu_961_p1;

assign i_2_fu_760_p2 = (i2_0_reg_291 + 2'd1);

assign i_3_fu_809_p2 = (i_0_i_reg_303 + 3'd1);

assign i_4_fu_999_p2 = (i3_0_reg_419 + 2'd1);

assign i_5_fu_904_p2 = (i_0_i1_reg_362 + 2'd1);

assign i_6_fu_1038_p2 = (i5_0_reg_452 + 2'd1);

assign i_fu_621_p2 = (i1_0_reg_269 + 2'd1);

assign icmp_ln122_fu_993_p2 = ((i3_0_reg_419 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_1032_p2 = ((i5_0_reg_452 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_898_p2 = ((i_0_i1_reg_362 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_803_p2 = ((i_0_i_reg_303 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_940_p2 = ((j_0_i5_reg_385 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_842_p2 = ((j_0_i_reg_326 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_527_p2 = ((phi_ln74_reg_258 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln74_2_fu_541_p2 = ((phi_ln74_reg_258 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_579_p2 = ((phi_ln74_reg_258 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_615_p2 = ((i1_0_reg_269 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_666_p2 = ((phi_ln89_reg_280 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln89_2_fu_680_p2 = ((phi_ln89_reg_280 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_718_p2 = ((phi_ln89_reg_280 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_754_p2 = ((i2_0_reg_291 == 2'd3) ? 1'b1 : 1'b0);

assign input_biases_address0 = zext_ln56_reg_1214;

assign input_weights_address0 = sext_ln58_fu_863_p1;

assign j_1_fu_946_p2 = (j_0_i5_reg_385 + 3'd1);

assign j_fu_848_p2 = (j_0_i_reg_326 + 2'd1);

assign out1_d0 = ((grp_fu_495_p2[0:0] === 1'b1) ? z_assign_reg_1262 : 32'd0);

assign out6_1_2_fu_1018_p3 = ((trunc_ln123_reg_1339[0:0] === 1'b1) ? out6_0_0_reg_397 : grp_fu_488_p2);

assign out6_1_3_fu_1025_p3 = ((trunc_ln123_reg_1339[0:0] === 1'b1) ? grp_fu_488_p2 : out6_1_0_reg_408);

assign select_ln123_fu_1009_p3 = ((trunc_ln123_fu_1005_p1[0:0] === 1'b1) ? out6_1_0_reg_408 : out6_0_0_reg_397);

assign select_ln134_1_fu_1056_p3 = ((trunc_ln134_fu_1044_p1[0:0] === 1'b1) ? out6_1_0_reg_408 : out_1_write_assign_reg_441);

assign select_ln134_fu_1048_p3 = ((trunc_ln134_fu_1044_p1[0:0] === 1'b1) ? out_0_write_assign_reg_430 : out6_0_0_reg_397);

assign select_ln60_1_fu_979_p3 = ((trunc_ln56_reg_1281[0:0] === 1'b1) ? out6_0_reg_338 : grp_fu_479_p2);

assign select_ln60_2_fu_986_p3 = ((trunc_ln56_reg_1281[0:0] === 1'b1) ? grp_fu_479_p2 : out6_1_reg_350);

assign select_ln60_fu_966_p3 = ((trunc_ln56_reg_1281[0:0] === 1'b1) ? 32'd1062036914 : 32'd1065339526);

assign select_ln74_1_fu_547_p3 = ((icmp_ln74_2_fu_541_p2[0:0] === 1'b1) ? scaled_x_2_0_fu_118 : select_ln74_fu_533_p3);

assign select_ln74_2_fu_555_p3 = ((icmp_ln74_1_fu_527_p2[0:0] === 1'b1) ? 32'd0 : scaled_x_1_0_fu_114);

assign select_ln74_3_fu_563_p3 = ((icmp_ln74_2_fu_541_p2[0:0] === 1'b1) ? scaled_x_1_0_fu_114 : select_ln74_2_fu_555_p3);

assign select_ln74_4_fu_571_p3 = ((icmp_ln74_2_fu_541_p2[0:0] === 1'b1) ? 32'd0 : scaled_x_0_0_fu_110);

assign select_ln74_fu_533_p3 = ((icmp_ln74_1_fu_527_p2[0:0] === 1'b1) ? scaled_x_2_0_fu_118 : 32'd0);

assign select_ln89_1_fu_686_p3 = ((icmp_ln89_2_fu_680_p2[0:0] === 1'b1) ? scaled_x2_2_0_fu_162 : select_ln89_fu_672_p3);

assign select_ln89_2_fu_694_p3 = ((icmp_ln89_1_fu_666_p2[0:0] === 1'b1) ? 32'd0 : scaled_x2_1_0_fu_158);

assign select_ln89_3_fu_702_p3 = ((icmp_ln89_2_fu_680_p2[0:0] === 1'b1) ? scaled_x2_1_0_fu_158 : select_ln89_2_fu_694_p3);

assign select_ln89_4_fu_710_p3 = ((icmp_ln89_2_fu_680_p2[0:0] === 1'b1) ? 32'd0 : scaled_x2_0_0_fu_154);

assign select_ln89_fu_672_p3 = ((icmp_ln89_1_fu_666_p2[0:0] === 1'b1) ? scaled_x2_2_0_fu_162 : 32'd0);

assign sext_ln58_1_fu_961_p1 = $signed(add_ln58_1_fu_956_p2);

assign sext_ln58_fu_863_p1 = $signed(add_ln58_fu_858_p2);

assign sub_ln58_1_fu_930_p2 = (tmp_5_fu_910_p3 - zext_ln58_3_fu_926_p1);

assign sub_ln58_fu_836_p2 = (zext_ln58_2_fu_832_p1 - zext_ln58_fu_820_p1);

assign tmp_1_fu_824_p3 = {{i_0_i_reg_303}, {2'd0}};

assign tmp_5_fu_910_p3 = {{i_0_i1_reg_362}, {3'd0}};

assign tmp_6_fu_918_p3 = {{i_0_i1_reg_362}, {1'd0}};

assign trunc_ln123_fu_1005_p1 = i3_0_reg_419[0:0];

assign trunc_ln134_fu_1044_p1 = i5_0_reg_452[0:0];

assign trunc_ln56_fu_936_p1 = i_0_i1_reg_362[0:0];

assign zext_ln56_fu_815_p1 = i_0_i_reg_303;

assign zext_ln58_1_fu_974_p1 = j_0_i5_reg_385;

assign zext_ln58_2_fu_832_p1 = tmp_1_fu_824_p3;

assign zext_ln58_3_fu_926_p1 = tmp_6_fu_918_p3;

assign zext_ln58_4_fu_854_p1 = j_0_i_reg_326;

assign zext_ln58_5_fu_952_p1 = j_0_i5_reg_385;

assign zext_ln58_fu_820_p1 = i_0_i_reg_303;

always @ (posedge ap_clk) begin
    zext_ln56_reg_1214[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln58_1_reg_1276[0] <= 1'b0;
end

endmodule //neural_net
