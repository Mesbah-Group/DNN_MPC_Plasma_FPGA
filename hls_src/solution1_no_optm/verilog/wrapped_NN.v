// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module wrapped_NN (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_data_V_address0,
        in_stream_data_V_ce0,
        in_stream_data_V_q0,
        out_stream_data_V_address0,
        out_stream_data_V_ce0,
        out_stream_data_V_we0,
        out_stream_data_V_d0,
        out_stream_keep_V_address0,
        out_stream_keep_V_ce0,
        out_stream_keep_V_we0,
        out_stream_keep_V_d0,
        out_stream_strb_V_address0,
        out_stream_strb_V_ce0,
        out_stream_strb_V_we0,
        out_stream_strb_V_d0,
        out_stream_user_V_address0,
        out_stream_user_V_ce0,
        out_stream_user_V_we0,
        out_stream_user_V_d0,
        out_stream_last_V_address0,
        out_stream_last_V_ce0,
        out_stream_last_V_we0,
        out_stream_last_V_d0,
        out_stream_id_V_address0,
        out_stream_id_V_ce0,
        out_stream_id_V_we0,
        out_stream_id_V_d0,
        out_stream_dest_V_address0,
        out_stream_dest_V_ce0,
        out_stream_dest_V_we0,
        out_stream_dest_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] in_stream_data_V_address0;
output   in_stream_data_V_ce0;
input  [31:0] in_stream_data_V_q0;
output  [0:0] out_stream_data_V_address0;
output   out_stream_data_V_ce0;
output   out_stream_data_V_we0;
output  [31:0] out_stream_data_V_d0;
output  [0:0] out_stream_keep_V_address0;
output   out_stream_keep_V_ce0;
output   out_stream_keep_V_we0;
output  [3:0] out_stream_keep_V_d0;
output  [0:0] out_stream_strb_V_address0;
output   out_stream_strb_V_ce0;
output   out_stream_strb_V_we0;
output  [3:0] out_stream_strb_V_d0;
output  [0:0] out_stream_user_V_address0;
output   out_stream_user_V_ce0;
output   out_stream_user_V_we0;
output  [3:0] out_stream_user_V_d0;
output  [0:0] out_stream_last_V_address0;
output   out_stream_last_V_ce0;
output   out_stream_last_V_we0;
output  [0:0] out_stream_last_V_d0;
output  [0:0] out_stream_id_V_address0;
output   out_stream_id_V_ce0;
output   out_stream_id_V_we0;
output  [4:0] out_stream_id_V_d0;
output  [0:0] out_stream_dest_V_address0;
output   out_stream_dest_V_ce0;
output   out_stream_dest_V_we0;
output  [4:0] out_stream_dest_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_data_V_ce0;
reg out_stream_data_V_ce0;
reg out_stream_data_V_we0;
reg out_stream_keep_V_ce0;
reg out_stream_keep_V_we0;
reg out_stream_strb_V_ce0;
reg out_stream_strb_V_we0;
reg out_stream_user_V_ce0;
reg out_stream_user_V_we0;
reg out_stream_last_V_ce0;
reg out_stream_last_V_we0;
reg out_stream_id_V_ce0;
reg out_stream_id_V_we0;
reg out_stream_dest_V_ce0;
reg out_stream_dest_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_249_p2;
reg   [1:0] i_reg_365;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln191_fu_243_p2;
reg   [31:0] out_0_reg_390;
wire    ap_CS_fsm_state4;
wire    grp_neural_net_fu_214_ap_ready;
wire    grp_neural_net_fu_214_ap_done;
reg   [31:0] out_1_reg_395;
wire   [1:0] i_1_fu_305_p2;
wire    ap_CS_fsm_state5;
wire    grp_neural_net_fu_214_ap_start;
wire    grp_neural_net_fu_214_ap_idle;
wire   [31:0] grp_neural_net_fu_214_ap_return_0;
wire   [31:0] grp_neural_net_fu_214_ap_return_1;
reg   [1:0] i_0_reg_191;
wire    ap_CS_fsm_state3;
reg   [1:0] i1_0_reg_203;
wire   [0:0] icmp_ln199_fu_299_p2;
reg    grp_neural_net_fu_214_ap_start_reg;
wire   [63:0] zext_ln192_fu_255_p1;
wire   [63:0] zext_ln200_fu_311_p1;
reg   [31:0] in_2_fu_70;
wire   [31:0] in_0_fu_272_p1;
reg   [31:0] in_2_1_fu_74;
reg   [31:0] in_2_2_fu_78;
wire   [0:0] trunc_ln200_fu_322_p1;
wire   [31:0] select_ln200_fu_333_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_neural_net_fu_214_ap_start_reg = 1'b0;
end

neural_net grp_neural_net_fu_214(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_neural_net_fu_214_ap_start),
    .ap_done(grp_neural_net_fu_214_ap_done),
    .ap_idle(grp_neural_net_fu_214_ap_idle),
    .ap_ready(grp_neural_net_fu_214_ap_ready),
    .in_0_read(in_2_fu_70),
    .in_1_read(in_2_1_fu_74),
    .in_2_read(in_2_2_fu_78),
    .ap_return_0(grp_neural_net_fu_214_ap_return_0),
    .ap_return_1(grp_neural_net_fu_214_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_neural_net_fu_214_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln191_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_neural_net_fu_214_ap_start_reg <= 1'b1;
        end else if ((grp_neural_net_fu_214_ap_ready == 1'b1)) begin
            grp_neural_net_fu_214_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_reg_203 <= i_1_fu_305_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_neural_net_fu_214_ap_done == 1'b1))) begin
        i1_0_reg_203 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_191 <= i_reg_365;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_191 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_365 <= i_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_0_reg_191 == 2'd1))) begin
        in_2_1_fu_74 <= in_0_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_reg_191 == 2'd1) & ~(i_0_reg_191 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_2_2_fu_78 <= in_0_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (i_0_reg_191 == 2'd0))) begin
        in_2_fu_70 <= in_0_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_neural_net_fu_214_ap_done == 1'b1))) begin
        out_0_reg_390 <= grp_neural_net_fu_214_ap_return_0;
        out_1_reg_395 <= grp_neural_net_fu_214_ap_return_1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln199_fu_299_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_stream_data_V_ce0 = 1'b1;
    end else begin
        in_stream_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_data_V_ce0 = 1'b1;
    end else begin
        out_stream_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_data_V_we0 = 1'b1;
    end else begin
        out_stream_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_dest_V_ce0 = 1'b1;
    end else begin
        out_stream_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_dest_V_we0 = 1'b1;
    end else begin
        out_stream_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_id_V_ce0 = 1'b1;
    end else begin
        out_stream_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_id_V_we0 = 1'b1;
    end else begin
        out_stream_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_keep_V_ce0 = 1'b1;
    end else begin
        out_stream_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_keep_V_we0 = 1'b1;
    end else begin
        out_stream_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_last_V_ce0 = 1'b1;
    end else begin
        out_stream_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_last_V_we0 = 1'b1;
    end else begin
        out_stream_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_strb_V_ce0 = 1'b1;
    end else begin
        out_stream_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_strb_V_we0 = 1'b1;
    end else begin
        out_stream_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_stream_user_V_ce0 = 1'b1;
    end else begin
        out_stream_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_user_V_we0 = 1'b1;
    end else begin
        out_stream_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln191_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_neural_net_fu_214_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln199_fu_299_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_neural_net_fu_214_ap_start = grp_neural_net_fu_214_ap_start_reg;

assign i_1_fu_305_p2 = (i1_0_reg_203 + 2'd1);

assign i_fu_249_p2 = (i_0_reg_191 + 2'd1);

assign icmp_ln191_fu_243_p2 = ((i_0_reg_191 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_299_p2 = ((i1_0_reg_203 == 2'd2) ? 1'b1 : 1'b0);

assign in_0_fu_272_p1 = in_stream_data_V_q0;

assign in_stream_data_V_address0 = zext_ln192_fu_255_p1;

assign out_stream_data_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_data_V_d0 = select_ln200_fu_333_p3;

assign out_stream_dest_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_dest_V_d0 = 5'd0;

assign out_stream_id_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_id_V_d0 = 5'd0;

assign out_stream_keep_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_keep_V_d0 = 4'd15;

assign out_stream_last_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_last_V_d0 = ((i1_0_reg_203 == 2'd1) ? 1'b1 : 1'b0);

assign out_stream_strb_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_strb_V_d0 = 4'd15;

assign out_stream_user_V_address0 = zext_ln200_fu_311_p1;

assign out_stream_user_V_d0 = 4'd0;

assign select_ln200_fu_333_p3 = ((trunc_ln200_fu_322_p1[0:0] === 1'b1) ? out_1_reg_395 : out_0_reg_390);

assign trunc_ln200_fu_322_p1 = i1_0_reg_203[0:0];

assign zext_ln192_fu_255_p1 = i_0_reg_191;

assign zext_ln200_fu_311_p1 = i1_0_reg_203;

endmodule //wrapped_NN
